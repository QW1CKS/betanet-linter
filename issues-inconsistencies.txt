Betanet Linter: Errors, Inconsistencies & Improvement Backlog
============================================================
Format: [ ] ISSUE-ID | Category | Title  (mark fixed with [x] or [✓])
Description
Impact
Proposed Fix / Action

Legend Categories: ARCH (Architecture), PERF (Performance), HEUR (Heuristics), API, SBOM, TEST, CODE, PLATFORM, ERROR, SEC, UX, EDGE, DOC

ARCHITECTURE / DESIGN
---------------------
[✓] ISSUE-001 | ARCH | Duplicate compliance engines
Two separate implementations: BetanetComplianceChecker (src/index.ts) and ComplianceChecker (src/compliance.ts) with diverging logic, severities, wording.
Impact: Confusion, inconsistent results, maintenance burden.
Action: Choose one canonical implementation; remove or deprecate the other. Prefer a single analyzer pass model.

[✓] ISSUE-002 | ARCH | Duplicate SBOM logic
SBOM generation exists in both BetanetComplianceChecker (index.ts) and SBOMGenerator (sbom.ts) with differing formats and field richness.
Impact: Divergent output, duplicated maintenance.
Action: Centralize SBOM logic into one module (e.g., src/sbom/) and expose consistent API.

[✓] ISSUE-003 | ARCH | Analyzer encapsulation leak
Code accesses private/internal state via checker.analyzer['binaryPath'] and similar patterns.
Impact: Breaks encapsulation; refactors risky.
Action: Add public getter(s); remove bracket access.

PERFORMANCE
-----------
[✓] ISSUE-004 | PERF | Repeated full analysis
Each capability helper calls analyze(), re-running expensive external commands for every compliance check.
Impact: O(N_checks * extraction cost) slowdown.
Action: Memoize analyze() result inside BinaryAnalyzer; reuse.

[✓] ISSUE-005 | PERF | Sequential capability checks
RESOLVED: Checks now evaluated in parallel with configurable --max-parallel; derive from single cached analysis.
Impact: Reduced wall time as checks scale.
Action: (Done) Consider adaptive pool sizing.

HEURISTICS / ACCURACY
---------------------
[✓] ISSUE-006 | HEUR | Kyber detection too broad
hasKyber768 triggers on substring '768' alone.
Impact: High false positives.
Action: Require 'kyber' AND maybe '768' or stricter regex /\bkyber(768)?\b/.

[✓] ISSUE-007 | HEUR | Port 443 detection naive
Searches any '443' substring (could be version numbers, etc.).
Impact: False positives.
Action: Use regex for network patterns (":443", "443/tcp") or context tokens.

[✓] ISSUE-008 | HEUR | QUIC / TLS / ECH detection simplistic
Simple substring presence; may misclassify libraries vs actual protocol support.
Impact: False positives.
Action: Combine multiple indicators (symbols + ALPN strings + version markers) with scoring threshold.

[✓] ISSUE-009 | HEUR | SCION path management inference weak
Looks for generic 'path' + 'maintenance' or 'disjoint'.
Impact: False positives.
Action: Define more specific token set; require at least one SCION-specific indicator.

[✓] ISSUE-010 | HEUR | DHT deterministic bootstrap detection
Just 'deterministic' + 'bootstrap'; may match comments or unrelated text.
Impact: Low signal quality.
Action: Expand to pattern list ("seed", "hash", configuration markers) or allow user-supplied hints.

[✓] ISSUE-011 | HEUR | Build provenance detection
'SLSA' OR 'provenance' triggers; 'reproducible' OR 'deterministic'.
Impact: Overstates compliance.
Action: Require combination and maybe structured metadata file detection.

[✓] ISSUE-012 | HEUR | Payment support inference broad
'ln' substring may match unrelated tokens.
Impact: False positives.
Action: Prefer 'lnpay', 'lightning', 'lnnode', 'lnurl', 'bolt' patterns.

[✓] ISSUE-051 | HEUR | Privacy hop enforcement heuristic coarse (refined weighting & diversity logic implemented)
Current detection relies on simple token presence (nym/mix/beaconset/diversity) which may appear in unrelated contexts.
Impact: Potential false positives/negatives for new check 11.
Action: Consider structured pattern grouping (BeaconSet+epoch parsing, VRF/seed terms, hop count tokens) & minimum entropy indicators.

API / LOGIC INCONSISTENCIES
---------------------------
[✓] ISSUE-013 | API | Severity differences between implementations
Same checks have different severities across index.ts vs compliance.ts.
Impact: Inconsistent pass/fail weighting.
Action: Normalize severity map centrally.

[✓] ISSUE-014 | API | Check naming differences
"DHT Seed Bootstrap" vs "DHT Bootstrap"; etc.
Impact: User confusion.
Action: Standardize names list constant.

[✓] ISSUE-015 | API | Potential division by zero
If include filter selects zero checks, overallScore = (0/0) => NaN.
Impact: Output invalid / crash risk downstream.
Action: Guard: if total == 0 set score=0 and passed=false with message.

[✓] ISSUE-016 | API | Post-quantum date logic timezone ambiguity
Using Date('2027-01-01') without timezone normalization.
Impact: Boundary off-by-one in some locales.
Action: Compare in UTC; use Date.UTC.
Resolution: Replaced local Date construction with UTC epoch constant (POST_QUANTUM_MANDATORY_EPOCH_MS) and override parser. Added boundary tests (pre-midnight, midnight, override ISO). Commit d551fbe.

SBOM ISSUES
-----------
[X] ISSUE-017 | SBOM | SPDX output simplistic / non-compliant
index.ts uses ad-hoc tag-value; relationships assume at least one component; duplicates possible.
Impact: Tooling ingestion problems.
Action: Use SPDX tools or produce valid 2.3 JSON/YAML with required fields; validate.

[X] ISSUE-018 | SBOM | Missing component hashes
No SHA-256 or other integrity data.
Impact: Limited supply chain value.
Action: Compute hashes of binary and dependencies.

[X] ISSUE-019 | SBOM | License detection naive
Hardcoded crypto component licenses, others 'unknown'.
Impact: Incomplete compliance data.
Action: Attempt simple license string scanning; allow override.

[✓] ISSUE-020 | SBOM | Duplicate component extraction patterns
RESOLVED: Legacy sbom.ts removed; single extraction path in index.ts.
Impact: Inconsistent outputs eliminated.
Action: (Done) Further enhancements tracked by 017-019,021.

[X] ISSUE-021 | SBOM | Version inference weak
Regex may capture false positives; unbounded scanning duplicates.
Impact: Noise in SBOM.
Action: Debounce matches; require plausible semantic version context.

TESTING
-------
[✓] ISSUE-022 | TEST | Analyzer mocking via property getter misuse
jest.spyOn(checker as any, 'analyzer', 'get') on a plain field (no getter) may not function as intended.
Impact: Tests might not actually stub analyzer.
Action: Refactor BetanetComplianceChecker to accept analyzer dependency injection.

[✓] ISSUE-023 | TEST | Missing coverage for compliance.ts & sbom.ts
RESOLVED: Duplicate implementations removed (compliance.ts, sbom.ts). No longer applicable.
Impact: Reduced maintenance & confusion.
Action: (Done) Focus remains on canonical BetanetComplianceChecker.

[✓] ISSUE-024 | TEST | No negative / false-positive tests
All tests check presence counts only.
Impact: Heuristic regressions undetected.
Action: Add fixtures with misleading strings to ensure not matched.

[✓] ISSUE-025 | TEST | Lacks performance regression tests
RESOLVED: Tests assert single analyze() invocation and measure parallel speed improvement.
Impact: Guards regression.
Action: (Done) Optional future micro-benchmark harness.

CODE QUALITY / CLEANUP
----------------------
[✓] ISSUE-026 | CODE | Unused imports in analyzer.ts
Imports of types not referenced.
Impact: Minor clutter.
Action: Remove unused imports; enable lint rule.

[X] ISSUE-027 | CODE | Repeated 'Missing:' message assembly
Pattern duplicated across checks.
Impact: Boilerplate, harder to adjust formatting.
Action: Utility helper for assembling missing features list.

[X] ISSUE-028 | CODE | Magic numbers / strings
Minimum string length 4; severity tokens; date string.
Impact: Reduced clarity.
Action: Extract constants.

[✓] ISSUE-029 | CODE | Post-quantum mandatory date hardcoded
RESOLVED: BETANET_PQ_DATE_OVERRIDE env var added; check 10 respects override for early enforcement testing.
Impact: Testability improved.
Action: (Done) Consider CLI flag alias in future.

[X] ISSUE-030 | CODE | Long method length (index.ts checkCompliance)
Could separate filtering logic & aggregation.
Impact: Readability.
Action: Extract smaller functions.

PLATFORM / PORTABILITY
----------------------
[✓] ISSUE-031 | PLATFORM | Reliance on Unix toolchain
strings,file,nm,objdump,ldd,uname may not exist on native Windows.
Impact: Limited portability; degraded analysis.
Action: Detect OS, use alternative (e.g., dumpbin on Windows) or require WSL; aggregate warnings.
Resolution: Added platform capture, degradationReasons, missingCoreTools list, concise degraded summary; guidance to use WSL/binutils. (No direct dumpbin integration yet – future enhancement.)

[✓] ISSUE-032 | PLATFORM | No graceful partial capability reporting
Failures silently return empty arrays.
Impact: User unaware of reduced analysis fidelity.
Action: Collect diagnostics and show in report footer.

ERROR HANDLING / ROBUSTNESS
---------------------------
[X] ISSUE-033 | ERROR | No binary existence pre-check
Errors arise deep in extraction.
Impact: Less friendly error messaging.
Action: fs.pathExists check upfront with clear message.

[✓] ISSUE-034 | ERROR | No timeout on external commands
Execa calls may hang.
Impact: CLI stalls.
Action: Add timeout & fallback path.
Resolution: Centralized safeExec wrapper (configurable via BETANET_TOOL_TIMEOUT_MS) now used for analyzer + SBOM (strings, ldd, file, sha256sum) with per-call timeouts (2025-08-11).

[✓] ISSUE-035 | ERROR | Silent fallback warnings gated by verbose only
Resolved: Added per-check degradedHints array with inline '(degraded)' marker & hints (strings tool missing, truncated, symbol degradation). Global degraded summary retained.

[✓] ISSUE-036 | ERROR | Missing try/catch around entire check loop
RESOLVED: Each check evaluation isolated with error & timeout handling; failures converted to failed check entry.
Impact: Increases resilience.
Action: (Done) Add verbose stack logging later.

SECURITY / TRUST
----------------
[X] ISSUE-037 | SEC | Unvalidated dependency path strings in SBOM
Names derived via path.basename without sanitization.
Impact: Potential formatting injection in reports.
Action: Sanitize component names (allow alphanum + -._ ).

[✓] ISSUE-038 | SEC | Large binary full read for fallback strings
Reads entire file into memory; potential memory exhaustion.
Impact: DoS risk on huge binaries.
Action: Stream parse in chunks with size limit guard.
Resolution: Streaming fallback with 32MiB cap (configurable via BETANET_FALLBACK_STRINGS_MAX_BYTES) added; truncation flagged via diagnostics (strings-fallback-truncated) (2025-08-11).

[X] ISSUE-039 | SEC | No hash computation for integrity
SBOM lacks integrity proofs.
Impact: Cannot verify tampering.
Action: Compute SHA-256 of binary + dependencies.

UX / CLI
--------
[✓] ISSUE-040 | UX | Filters only on 'validate' command
Resolved: Added --checks / --exclude parity to 'check' command (CLI), enabling selective inclusion/exclusion without using validate alias.

[✓] ISSUE-041 | UX | Severity threshold not configurable
RESOLVED: severityMin option / --severity-min flag implemented; scoring filters by severity rank.
Impact: Customization enabled.
Action: (Done)

[X] ISSUE-042 | UX | SBOM generation flag naming
--sbom + --sbom-format vs separate 'sbom' command; redundancy.
Impact: User confusion.
Action: Keep both but unify naming (--sbom-format -> --format for check).

[✓] ISSUE-043 | UX | Report lacks tool versions & analysis diagnostics
No section showing which external tools succeeded / failed.
Impact: Hard to trust results.
Action: Add diagnostics summary table.

EDGE CASES
----------
[X] ISSUE-044 | EDGE | Zero components SBOM relationships
Relationship lines assume at least one component.
Impact: Invalid SPDX output when none.
Action: Conditionally emit relationships.

[X] ISSUE-045 | EDGE | Duplicate components not deduped in index.ts SBOM
No duplicate filtering there (only in sbom.ts).
Impact: Bloated SBOM.
Action: Add dedupe pass.

[X] ISSUE-046 | EDGE | Large number of components performance
Mapping and building XML without streaming.
Impact: Memory spike.
Action: Stream or chunk if components > threshold.

[X] ISSUE-047 | EDGE | Unicode strings handling
Fallback extraction only treats bytes 32-126 ASCII.
Impact: Misses UTF-8 indicators.
Action: Improve parsing to decode UTF-8 sequences.

DOCUMENTATION
-------------
[✓] ISSUE-048 | DOC | README omits alternate ComplianceChecker
RESOLVED: Alternate ComplianceChecker removed; README already reflects single implementation.
Impact: Confusion eliminated.
Action: (Done) Consider adding ARCHITECTURE.md note of consolidation.

[✓] ISSUE-049 | DOC | Missing explanation of heuristic nature
Spec suggests "validates" but actually heuristics.
Impact: Overstated confidence.
Action: Add disclaimer & guidance.
Resolution: Added explicit heuristic disclaimer, limitations, and guidance in README plus 1.1 delta matrix (2025-08-11).

[✓] ISSUE-050 | DOC | No contribution guidelines for adding new checks
Process unclear.
Impact: Inconsistent future additions.
Action: Add CONTRIBUTING section: pattern, naming, severity criteria.
Resolution: CONTRIBUTING.md created with sections on architecture overview, adding a check lifecycle, severity rubric, heuristic design principles, SBOM feature tagging, performance guardrails, and test matrix requirements (2025-08-11).

PRIORITIZATION SUGGESTION (High → Low)
--------------------------------------
High: ISSUE-001, 004, 006, 013, 015, 017, 031, 033, 034
Medium: 002, 007, 018, 022, 036, 037, 038, 040, 041
Low: Remaining items.

NEXT ACTION STARTER SET
-----------------------
1) Implement analyze() memoization (ISSUE-004) + add unit test (ISSUE-025).
2) Introduce Diagnostics object capturing tool availability (ISSUE-031, 032) and display in report (ISSUE-043).
3) Harden heuristics for Kyber/port (ISSUE-006, 007, 008) with regex.
4) Guard division by zero (ISSUE-015).
5) Select & deprecate duplicate compliance engine (ISSUE-001, 013, 014).

End of backlog.

BETANET 1.1 SPEC DELTA TRACKING (Added 2025-08-11)
--------------------------------------------------
Context: The linter originated against Betanet 1.0 assumptions. Partial 1.1 heuristics have been integrated (transport endpoint versioning, optional WebRTC transport, enhanced DHT rendezvous / BeaconSet indicators, extended payment voucher/FROST/PoW signals). This section enumerates what 1.1 deltas are already reflected vs still pending so contributors can focus Plan 3+ work.

Implemented 1.1-Relevant Deltas (status captured in code & docs; no new issue IDs created to avoid retroactive noise):
[✓] Transport endpoint multi-version heuristic (1.0.0 / 1.1.0) + optional WebRTC flag
[✓] DHT rendezvous rotation & BeaconSet token indicators
[✓] Payment heuristics: voucher token, FROST mention, PoW ≥22-bit textual indicator
[✓] Extended diagnostics & constants module allowing future version gating

New / Pending 1.1-Specific Issues
---------------------------------
[✓] ISSUE-051 | HEUR | Missing negative tests for new 1.1 heuristics
Rendezvous rotation, BeaconSet, voucher/FROST/PoW indicators lack dedicated false-positive regression tests.
Impact: Future heuristic broadening could silently inflate compliance.
Action: Add fixtures with unrelated use of 'voucher', 'rotation', 'beacon' to assert non-matches; add positive minimal fixtures.

[✓] ISSUE-052 | ARCH | Central feature flag matrix for spec versions
IMPLEMENTED: Registry entries now include introducedIn & mandatoryIn fields. Spec coverage summary computed from CHECK_REGISTRY.
Impact: Future spec (1.2+) evolution now data-driven.
Action: (Done) Extend when new checks added; consider adding enforcement gating later.

[✓] ISSUE-053 | HEUR | Voucher structural validation absent (structural regex & format tokens implemented)
Only detects presence of 'voucher' token; no format, length, signature, or prefix pattern verification.
Impact: Overstates payment readiness.
Action: Define expected voucher regex (e.g., base58/hex length), optional checksum heuristic.

[✓] ISSUE-054 | HEUR | PoW difficulty heuristic shallow (contextual regex parsing implemented)
Currently any string with 'pow' and '22' may pass threshold intent.
Impact: Could misclassify generic log text.
Action: Parse nearby context (e.g., 'pow=22', 'difficulty:22', 'work(22)') with bounded regex capturing.

[✓] ISSUE-055 | UX | Spec version summary not surfaced
IMPLEMENTED: CLI/table output prints spec coverage line + pending 1.1 refinement issue IDs; JSON/YAML include specSummary object.
Impact: Transparency improved; users see partial 1.1 coverage.
Action: (Done) Keep pending issue list synchronized.

[✓] ISSUE-056 | TEST | Stripped / packed binary degradation tests (added nm/objdump skip degradation test)
No tests simulating stripped symbols (nm/objdump absence) to ensure graceful heuristic fallback.
Impact: 1.1 heuristics may rely too heavily on symbol names.
Action: Provide synthetic minimal binary or mock analyzer output to simulate missing symbols.

[✓] ISSUE-057 | PERF | Parallel capability aggregation still pending (1.1 scale)
RESOLVED: Parallel aggregation implemented (see ISSUE-005). Wall time test added.
Impact: Scaling latency controlled.
Action: (Done) Add runtime timing histogram later.

[✓] ISSUE-058 | SBOM | Versioned component mapping for new transports / payment modules
Implemented: SBOM feature tagging adds betanet.feature properties (transport-htx, transport-quic, transport-webrtc, crypto-pq-hybrid, payment-* etc.) to CycloneDX metadata and PackageComment lines in SPDX outputs.
Impact: Traceability of spec-era capabilities now visible in SBOM.
Action: Future: optionally tag individual dependency components when feature-specific libraries detected.

[ ] ISSUE-059 | EDGE | Static-only approach misses dynamic 1.1 behaviors (Deferred)
Rotation scheduling, path diversity, and real PoW verification are runtime phenomena.
Impact: False negatives for binaries using late-bound or generated strings.
Action: (Future) Introduce optional dynamic probe mode (exec with --dry-scan env) or plugin architecture.

[✓] ISSUE-060 | DOC | README lacks 1.1 delta coverage table
Documentation lists partial support but not a matrix of implemented vs pending 1.1 features.
Impact: Contributors lack at-a-glance roadmap.
Action: Add table referencing ISSUE-051..060 statuses; auto-update suggestion script.
Resolution: README updated with 1.1 delta coverage matrix & feature tagging notes (2025-08-11).

Note: Issues 051–060 focus exclusively on Betanet 1.1 evolution; they should be reassessed once Plan 3 consolidation is underway to avoid duplication with architectural refactors.
